
/* automatically generated from a server_param message using
   bool produce_server_param_parser()
   in sensorparser.c
                  DO NOT EDIT THIS FILE !!!
*/
#include "sensorparser.h"
#include "str2val.h"
#include "macro_msg.h"

bool SensorParser::manual_parse_server_param(const char * str, Msg_server_param & param) {
  const char * origin= str;
  
  bool res;
  
  char const* dum;
  res= strskip(str,"(server_param",str);
  while (res) {
    res= strskip(str,'(',str);
    if ( ! res ) {
      res= strskip(str,')',str);
      break;
    }
    bool unknown_option= false;
    switch( *str ) {
      // ----------------------------------------------------------------
    case 'w': 
      if ( strskip(str,"wind_random",dum) )  {
        str= dum;
        res= str2val(str,param.wind_random,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"wind_rand",dum) )  {
        str= dum;
        res= str2val(str,param.wind_rand,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"wind_none",dum) )  {
        str= dum;
        res= str2val(str,param.wind_none,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"wind_force",dum) )  {
        str= dum;
        res= str2val(str,param.wind_force,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"wind_dir",dum) )  {
        str= dum;
        res= str2val(str,param.wind_dir,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"wind_ang",dum) )  {
        str= dum;
        res= str2val(str,param.wind_ang,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'v': 
      if ( strskip(str,"visible_distance",dum) )  {
        str= dum;
        res= str2val(str,param.visible_distance,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"visible_angle",dum) )  {
        str= dum;
        res= str2val(str,param.visible_angle,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"verbose",dum) )  {
        str= dum;
        res= str2val(str,param.verbose,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'u': 
      if ( strskip(str,"use_offside",dum) )  {
        str= dum;
        res= str2val(str,param.use_offside,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 't': 
      if ( strskip(str,"text_logging",dum) )  {
        str= dum;
        res= str2val(str,param.text_logging,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"text_log_fixed_name",dum) )  {
        str= dum;
        res= str2val(str,param.text_log_fixed_name,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"text_log_fixed",dum) )  {
        str= dum;
        res= str2val(str,param.text_log_fixed,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"text_log_dir",dum) )  {
        str= dum;
        res= str2val(str,param.text_log_dir,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"text_log_dated",dum) )  {
        str= dum;
        res= str2val(str,param.text_log_dated,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"text_log_compression",dum) )  {
        str= dum;
        res= str2val(str,param.text_log_compression,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"team_r_start",dum) )  {
        str= dum;
        res= str2val(str,param.team_r_start,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"team_l_start",dum) )  {
        str= dum;
        res= str2val(str,param.team_l_start,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"team_actuator_noise",dum) )  {
        str= dum;
        res= str2val(str,param.team_actuator_noise,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_width",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_width,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_rand_factor",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_rand_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_power_rate",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_power_rate,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_exponent",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_exponent,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_dist",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_dist,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_cycles",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_cycles,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"tackle_back_dist",dum) )  {
        str= dum;
        res= str2val(str,param.tackle_back_dist,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 's': 
      if ( strskip(str,"synch_see_offset",dum) )  {
        str= dum;
        res= str2val(str,param.synch_see_offset,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"synch_offset",dum) )  {
        str= dum;
        res= str2val(str,param.synch_offset,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"synch_mode",dum) )  {
        str= dum;
        res= str2val(str,param.synch_mode,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"synch_micro_sleep",dum) )  {
        str= dum;
        res= str2val(str,param.synch_micro_sleep,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"stopped_ball_vel",dum) )  {
        str= dum;
        res= str2val(str,param.stopped_ball_vel,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"start_goal_r",dum) )  {
        str= dum;
        res= str2val(str,param.start_goal_r,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"start_goal_l",dum) )  {
        str= dum;
        res= str2val(str,param.start_goal_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"stamina_max",dum) )  {
        str= dum;
        res= str2val(str,param.stamina_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"stamina_inc_max",dum) )  {
        str= dum;
        res= str2val(str,param.stamina_inc_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"stamina_capacity",dum) )  {
        str= dum;
        res= str2val(str,param.stamina_capacity,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"slowness_on_top_for_right_team",dum) )  {
        str= dum;
        res= str2val(str,param.slowness_on_top_for_right_team,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"slowness_on_top_for_left_team",dum) )  {
        str= dum;
        res= str2val(str,param.slowness_on_top_for_left_team,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"slow_down_factor",dum) )  {
        str= dum;
        res= str2val(str,param.slow_down_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"simulator_step",dum) )  {
        str= dum;
        res= str2val(str,param.simulator_step,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"side_dash_rate",dum) )  {
        str= dum;
        res= str2val(str,param.side_dash_rate,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"sense_body_step",dum) )  {
        str= dum;
        res= str2val(str,param.sense_body_step,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"send_vi_step",dum) )  {
        str= dum;
        res= str2val(str,param.send_vi_step,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"send_step",dum) )  {
        str= dum;
        res= str2val(str,param.send_step,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"send_comms",dum) )  {
        str= dum;
        res= str2val(str,param.send_comms,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"say_msg_size",dum) )  {
        str= dum;
        res= str2val(str,param.say_msg_size,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"say_coach_msg_size",dum) )  {
        str= dum;
        res= str2val(str,param.say_coach_msg_size,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"say_coach_cnt_max",dum) )  {
        str= dum;
        res= str2val(str,param.say_coach_cnt_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'r': 
      if ( strskip(str,"recv_step",dum) )  {
        str= dum;
        res= str2val(str,param.recv_step,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"recover_min",dum) )  {
        str= dum;
        res= str2val(str,param.recover_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"recover_init",dum) )  {
        str= dum;
        res= str2val(str,param.recover_init,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"recover_dec_thr",dum) )  {
        str= dum;
        res= str2val(str,param.recover_dec_thr,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"recover_dec",dum) )  {
        str= dum;
        res= str2val(str,param.recover_dec,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"record_messages",dum) )  {
        str= dum;
        res= str2val(str,param.record_messages,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'q': 
      if ( strskip(str,"quantize_step_l",dum) )  {
        str= dum;
        res= str2val(str,param.quantize_step_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"quantize_step",dum) )  {
        str= dum;
        res= str2val(str,param.quantize_step,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'p': 
      if ( strskip(str,"proper_goal_kicks",dum) )  {
        str= dum;
        res= str2val(str,param.proper_goal_kicks,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"profile",dum) )  {
        str= dum;
        res= str2val(str,param.profile,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"prand_factor_r",dum) )  {
        str= dum;
        res= str2val(str,param.prand_factor_r,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"prand_factor_l",dum) )  {
        str= dum;
        res= str2val(str,param.prand_factor_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"port",dum) )  {
        str= dum;
        res= str2val(str,param.port,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"point_to_duration",dum) )  {
        str= dum;
        res= str2val(str,param.point_to_duration,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"point_to_ban",dum) )  {
        str= dum;
        res= str2val(str,param.point_to_ban,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_weight",dum) )  {
        str= dum;
        res= str2val(str,param.player_weight,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_speed_max_min",dum) )  {
        str= dum;
        res= str2val(str,param.player_speed_max_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_speed_max",dum) )  {
        str= dum;
        res= str2val(str,param.player_speed_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_size",dum) )  {
        str= dum;
        res= str2val(str,param.player_size,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_rand",dum) )  {
        str= dum;
        res= str2val(str,param.player_rand,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_decay",dum) )  {
        str= dum;
        res= str2val(str,param.player_decay,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_accel_max",dum) )  {
        str= dum;
        res= str2val(str,param.player_accel_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"penalty_shoot_outs",dum) )  {
        str= dum;
        res= str2val(str,param.penalty_shoot_outs,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_taken_wait",dum) )  {
        str= dum;
        res= str2val(str,param.pen_taken_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_setup_wait",dum) )  {
        str= dum;
        res= str2val(str,param.pen_setup_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_ready_wait",dum) )  {
        str= dum;
        res= str2val(str,param.pen_ready_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_random_winner",dum) )  {
        str= dum;
        res= str2val(str,param.pen_random_winner,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_nr_kicks",dum) )  {
        str= dum;
        res= str2val(str,param.pen_nr_kicks,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_max_goalie_dist_x",dum) )  {
        str= dum;
        res= str2val(str,param.pen_max_goalie_dist_x,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_max_extra_kicks",dum) )  {
        str= dum;
        res= str2val(str,param.pen_max_extra_kicks,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_dist_x",dum) )  {
        str= dum;
        res= str2val(str,param.pen_dist_x,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_coach_moves_players",dum) )  {
        str= dum;
        res= str2val(str,param.pen_coach_moves_players,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_before_setup_wait",dum) )  {
        str= dum;
        res= str2val(str,param.pen_before_setup_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"pen_allow_mult_kicks",dum) )  {
        str= dum;
        res= str2val(str,param.pen_allow_mult_kicks,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'o': 
      if ( strskip(str,"old_coach_hear",dum) )  {
        str= dum;
        res= str2val(str,param.old_coach_hear,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"olcoach_port",dum) )  {
        str= dum;
        res= str2val(str,param.olcoach_port,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"offside_kick_margin",dum) )  {
        str= dum;
        res= str2val(str,param.offside_kick_margin,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"offside_active_area_size",dum) )  {
        str= dum;
        res= str2val(str,param.offside_active_area_size,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'n': 
      if ( strskip(str,"nr_normal_halfs",dum) )  {
        str= dum;
        res= str2val(str,param.nr_normal_halfs,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"nr_extra_halfs",dum) )  {
        str= dum;
        res= str2val(str,param.nr_extra_halfs,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'm': 
      if ( strskip(str,"minpower",dum) )  {
        str= dum;
        res= str2val(str,param.minpower,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"minneckmoment",dum) )  {
        str= dum;
        res= str2val(str,param.minneckmoment,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"minneckang",dum) )  {
        str= dum;
        res= str2val(str,param.minneckang,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"minmoment",dum) )  {
        str= dum;
        res= str2val(str,param.minmoment,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"min_dash_power",dum) )  {
        str= dum;
        res= str2val(str,param.min_dash_power,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"min_dash_angle",dum) )  {
        str= dum;
        res= str2val(str,param.min_dash_angle,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"maxpower",dum) )  {
        str= dum;
        res= str2val(str,param.maxpower,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"maxneckmoment",dum) )  {
        str= dum;
        res= str2val(str,param.maxneckmoment,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"maxneckang",dum) )  {
        str= dum;
        res= str2val(str,param.maxneckang,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"maxmoment",dum) )  {
        str= dum;
        res= str2val(str,param.maxmoment,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"max_tackle_power",dum) )  {
        str= dum;
        res= str2val(str,param.max_tackle_power,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"max_goal_kicks",dum) )  {
        str= dum;
        res= str2val(str,param.max_goal_kicks,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"max_dash_power",dum) )  {
        str= dum;
        res= str2val(str,param.max_dash_power,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"max_dash_angle",dum) )  {
        str= dum;
        res= str2val(str,param.max_dash_angle,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"max_back_tackle_power",dum) )  {
        str= dum;
        res= str2val(str,param.max_back_tackle_power,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'l': 
      if ( strskip(str,"log_times",dum) )  {
        str= dum;
        res= str2val(str,param.log_times,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"log_date_format",dum) )  {
        str= dum;
        res= str2val(str,param.log_date_format,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"landmark_file",dum) )  {
        str= dum;
        res= str2val(str,param.landmark_file,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'k': 
      if ( strskip(str,"kickable_margin",dum) )  {
        str= dum;
        res= str2val(str,param.kickable_margin,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_rand_factor_r",dum) )  {
        str= dum;
        res= str2val(str,param.kick_rand_factor_r,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_rand_factor_l",dum) )  {
        str= dum;
        res= str2val(str,param.kick_rand_factor_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_rand",dum) )  {
        str= dum;
        res= str2val(str,param.kick_rand,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_power_rate",dum) )  {
        str= dum;
        res= str2val(str,param.kick_power_rate,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_off_wait",dum) )  {
        str= dum;
        res= str2val(str,param.kick_off_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_width",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_width,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_start",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_start,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_logging",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_logging,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_log_fixed_name",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_log_fixed_name,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_log_fixed",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_log_fixed,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_log_dir",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_log_dir,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_log_dated",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_log_dated,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway_length",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway_length,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"keepaway",dum) )  {
        str= dum;
        res= str2val(str,param.keepaway,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'i': 
      if ( strskip(str,"inertia_moment",dum) )  {
        str= dum;
        res= str2val(str,param.inertia_moment,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'h': 
      if ( strskip(str,"hear_max",dum) )  {
        str= dum;
        res= str2val(str,param.hear_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"hear_inc",dum) )  {
        str= dum;
        res= str2val(str,param.hear_inc,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"hear_decay",dum) )  {
        str= dum;
        res= str2val(str,param.hear_decay,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"half_time",dum) )  {
        str= dum;
        res= str2val(str,param.half_time,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'g': 
      if ( strskip(str,"golden_goal",dum) )  {
        str= dum;
        res= str2val(str,param.golden_goal,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"goalie_max_moves",dum) )  {
        str= dum;
        res= str2val(str,param.goalie_max_moves,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"goal_width",dum) )  {
        str= dum;
        res= str2val(str,param.goal_width,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_over_wait",dum) )  {
        str= dum;
        res= str2val(str,param.game_over_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_logging",dum) )  {
        str= dum;
        res= str2val(str,param.game_logging,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_version",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_version,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_fixed_name",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_fixed_name,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_fixed",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_fixed,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_dir",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_dir,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_dated",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_dated,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"game_log_compression",dum) )  {
        str= dum;
        res= str2val(str,param.game_log_compression,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'f': 
      if ( strskip(str,"fullstate_r",dum) )  {
        str= dum;
        res= str2val(str,param.fullstate_r,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"fullstate_l",dum) )  {
        str= dum;
        res= str2val(str,param.fullstate_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"freeform_wait_period",dum) )  {
        str= dum;
        res= str2val(str,param.freeform_wait_period,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"freeform_send_period",dum) )  {
        str= dum;
        res= str2val(str,param.freeform_send_period,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"free_kick_faults",dum) )  {
        str= dum;
        res= str2val(str,param.free_kick_faults,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"foul_exponent",dum) )  {
        str= dum;
        res= str2val(str,param.foul_exponent,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"foul_detect_probability",dum) )  {
        str= dum;
        res= str2val(str,param.foul_detect_probability,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"foul_cycles",dum) )  {
        str= dum;
        res= str2val(str,param.foul_cycles,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"forbid_kick_off_offside",dum) )  {
        str= dum;
        res= str2val(str,param.forbid_kick_off_offside,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'e': 
      if ( strskip(str,"extra_stamina",dum) )  {
        str= dum;
        res= str2val(str,param.extra_stamina,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"extra_half_time",dum) )  {
        str= dum;
        res= str2val(str,param.extra_half_time,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_min",dum) )  {
        str= dum;
        res= str2val(str,param.effort_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_init",dum) )  {
        str= dum;
        res= str2val(str,param.effort_init,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_inc_thr",dum) )  {
        str= dum;
        res= str2val(str,param.effort_inc_thr,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_inc",dum) )  {
        str= dum;
        res= str2val(str,param.effort_inc,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_dec_thr",dum) )  {
        str= dum;
        res= str2val(str,param.effort_dec_thr,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_dec",dum) )  {
        str= dum;
        res= str2val(str,param.effort_dec,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'd': 
      if ( strskip(str,"drop_ball_time",dum) )  {
        str= dum;
        res= str2val(str,param.drop_ball_time,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"dash_power_rate",dum) )  {
        str= dum;
        res= str2val(str,param.dash_power_rate,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"dash_angle_step",dum) )  {
        str= dum;
        res= str2val(str,param.dash_angle_step,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'c': 
      if ( strskip(str,"control_radius",dum) )  {
        str= dum;
        res= str2val(str,param.control_radius,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"connect_wait",dum) )  {
        str= dum;
        res= str2val(str,param.connect_wait,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"coach_w_referee",dum) )  {
        str= dum;
        res= str2val(str,param.coach_w_referee,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"coach_port",dum) )  {
        str= dum;
        res= str2val(str,param.coach_port,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"coach",dum) )  {
        str= dum;
        res= str2val(str,param.coach,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_win_size",dum) )  {
        str= dum;
        res= str2val(str,param.clang_win_size,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_rule_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_rule_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_meta_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_meta_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_mess_per_cycle",dum) )  {
        str= dum;
        res= str2val(str,param.clang_mess_per_cycle,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_mess_delay",dum) )  {
        str= dum;
        res= str2val(str,param.clang_mess_delay,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_info_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_info_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_del_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_del_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_define_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_define_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"clang_advice_win",dum) )  {
        str= dum;
        res= str2val(str,param.clang_advice_win,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ckick_margin",dum) )  {
        str= dum;
        res= str2val(str,param.ckick_margin,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"catchable_area_w",dum) )  {
        str= dum;
        res= str2val(str,param.catchable_area_w,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"catchable_area_l",dum) )  {
        str= dum;
        res= str2val(str,param.catchable_area_l,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"catch_probability",dum) )  {
        str= dum;
        res= str2val(str,param.catch_probability,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"catch_ban_cycle",dum) )  {
        str= dum;
        res= str2val(str,param.catch_ban_cycle,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'b': 
      if ( strskip(str,"ball_weight",dum) )  {
        str= dum;
        res= str2val(str,param.ball_weight,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_stuck_area",dum) )  {
        str= dum;
        res= str2val(str,param.ball_stuck_area,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_speed_max",dum) )  {
        str= dum;
        res= str2val(str,param.ball_speed_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_size",dum) )  {
        str= dum;
        res= str2val(str,param.ball_size,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_rand",dum) )  {
        str= dum;
        res= str2val(str,param.ball_rand,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_decay",dum) )  {
        str= dum;
        res= str2val(str,param.ball_decay,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"ball_accel_max",dum) )  {
        str= dum;
        res= str2val(str,param.ball_accel_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"back_passes",dum) )  {
        str= dum;
        res= str2val(str,param.back_passes,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"back_dash_rate",dum) )  {
        str= dum;
        res= str2val(str,param.back_dash_rate,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'a': 
      if ( strskip(str,"auto_mode",dum) )  {
        str= dum;
        res= str2val(str,param.auto_mode,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"audio_cut_dist",dum) )  {
        str= dum;
        res= str2val(str,param.audio_cut_dist,str) && strskip(str,')',str);
        break;
      }
    default: 
      unknown_option= true;
    }
    if ( unknown_option ) {
      WARNING_OUT << "\nunkown server option [";
        while ( *str != '\0' && *str != ')' )
          WARNING_STREAM << *str++;
        WARNING_STREAM << "]";
        if ( *str == ')' )
          str++;
        else
          res= false;
    }
  } //while
  
  if (!res) {
    ERROR_OUT << "\nparse error:\n";
    show_parser_error_point(ERROR_STREAM,origin,str);
  }
  return res;
}

/* automatically generated from a server_param message using
   bool produce_server_param_parser()
   in sensorparser.c
                  DO NOT EDIT THIS FILE !!!
*/
#include "sensorparser.h"
#include "str2val.h"
#include "macro_msg.h"

bool SensorParser::manual_parse_player_param(const char * str, Msg_player_param & param) {
  const char * origin= str;
  
  bool res;
  
  char const* dum;
  res= strskip(str,"(player_param",str);
  while (res) {
    res= strskip(str,'(',str);
    if ( ! res ) {
      res= strskip(str,')',str);
      break;
    }
    bool unknown_option= false;
    switch( *str ) {
      // ----------------------------------------------------------------
    case 's': 
      if ( strskip(str,"subs_max",dum) )  {
        str= dum;
        res= str2val(str,param.subs_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"stamina_inc_max_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.stamina_inc_max_delta_factor,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'r': 
      if ( strskip(str,"random_seed",dum) )  {
        str= dum;
        res= str2val(str,param.random_seed,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'p': 
      if ( strskip(str,"pt_max",dum) )  {
        str= dum;
        res= str2val(str,param.pt_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_types",dum) )  {
        str= dum;
        res= str2val(str,param.player_types,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_speed_max_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.player_speed_max_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_speed_max_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.player_speed_max_delta_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_size_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.player_size_delta_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_decay_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.player_decay_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"player_decay_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.player_decay_delta_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'n': 
      if ( strskip(str,"new_stamina_inc_max_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.new_stamina_inc_max_delta_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"new_dash_power_rate_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.new_dash_power_rate_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"new_dash_power_rate_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.new_dash_power_rate_delta_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'k': 
      if ( strskip(str,"kickable_margin_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.kickable_margin_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kickable_margin_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.kickable_margin_delta_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_rand_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.kick_rand_delta_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_power_rate_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.kick_power_rate_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"kick_power_rate_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.kick_power_rate_delta_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'i': 
      if ( strskip(str,"inertia_moment_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.inertia_moment_delta_factor,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'f': 
      if ( strskip(str,"foul_detect_probability_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.foul_detect_probability_delta_factor,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'e': 
      if ( strskip(str,"extra_stamina_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.extra_stamina_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"extra_stamina_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.extra_stamina_delta_max,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_min_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.effort_min_delta_factor,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"effort_max_delta_factor",dum) )  {
        str= dum;
        res= str2val(str,param.effort_max_delta_factor,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'd': 
      if ( strskip(str,"dash_power_rate_delta_min",dum) )  {
        str= dum;
        res= str2val(str,param.dash_power_rate_delta_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"dash_power_rate_delta_max",dum) )  {
        str= dum;
        res= str2val(str,param.dash_power_rate_delta_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'c': 
      if ( strskip(str,"catchable_area_l_stretch_min",dum) )  {
        str= dum;
        res= str2val(str,param.catchable_area_l_stretch_min,str) && strskip(str,')',str);
        break;
      }
      else if ( strskip(str,"catchable_area_l_stretch_max",dum) )  {
        str= dum;
        res= str2val(str,param.catchable_area_l_stretch_max,str) && strskip(str,')',str);
        break;
      }
      unknown_option= true;
      break;
      // ----------------------------------------------------------------
    case 'a': 
      if ( strskip(str,"allow_mult_default_type",dum) )  {
        str= dum;
        res= str2val(str,param.allow_mult_default_type,str) && strskip(str,')',str);
        break;
      }
    default: 
      unknown_option= true;
    }
    if ( unknown_option ) {
      WARNING_OUT << "\nunkown server option [";
        while ( *str != '\0' && *str != ')' )
          WARNING_STREAM << *str++;
        WARNING_STREAM << "]";
        if ( *str == ')' )
          str++;
        else
          res= false;
    }
  } //while
  
  if (!res) {
    ERROR_OUT << "\nparse error:\n";
    show_parser_error_point(ERROR_STREAM,origin,str);
  }
  return res;
}
