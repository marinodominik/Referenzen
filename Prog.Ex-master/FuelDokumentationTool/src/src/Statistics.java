import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;

import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.SwingUtilities;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import tanktool3.javaconnect;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Emre
 */


public class Statistics extends javax.swing.JFrame {

    private static int WINDOW_CLOSING;
    


    /**
     * Creates new form Statistics
     */
    public Statistics() {
        initComponents();
        selectAllCars();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closingStatistics = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        printCostsForCar = new javax.swing.JLabel();
        printAvgLiters = new javax.swing.JLabel();
        printAvgPrice = new javax.swing.JLabel();
        printMaxRange = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        selectCarInDB = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        chooseStatisticsCombo = new javax.swing.JComboBox<>();
        execute = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        totalRange = new javax.swing.JLabel();
        totalCosts = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("in km");

        closingStatistics.setText("Back");
        closingStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closingStatisticsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Max. Range:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Max. Costs:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Avg. (l/100km):");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Avg. Price(kind Fuel):");

        printCostsForCar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        printCostsForCar.setText("in EUR");

        printAvgLiters.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        printAvgLiters.setText("in liters");

        printAvgPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        printAvgPrice.setText("in EUR");

        printMaxRange.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        printMaxRange.setText("in KM");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Choose a Car");

        selectCarInDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCarInDBActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Statistics:");

        chooseStatisticsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Last Entrys", "Fuel Price (in liters)", "Total Odemeter", "Liters for 100 KM" }));
        chooseStatisticsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseStatisticsComboActionPerformed(evt);
            }
        });

        execute.setText("Execute");
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Total Costs:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Total Range:");

        totalRange.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalRange.setText("in KM");

        totalCosts.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalCosts.setText("in EUR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(execute)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(selectCarInDB, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(printMaxRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(printCostsForCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(printAvgLiters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(printAvgPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(13, 13, 13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chooseStatisticsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(closingStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalCosts, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectCarInDB, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(execute)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(printMaxRange)
                            .addComponent(jLabel6)
                            .addComponent(totalRange))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(printCostsForCar)
                            .addComponent(jLabel5)
                            .addComponent(totalCosts))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(printAvgLiters))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(printAvgPrice))
                        .addContainerGap(43, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseStatisticsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closingStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closingStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closingStatisticsActionPerformed
        close();
        MainWindow s = new MainWindow();
        s.setVisible(true);
        
       
    }//GEN-LAST:event_closingStatisticsActionPerformed
   public void close(){
        WindowEvent winClosingEvent =  new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }
   
    private void chooseStatisticsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseStatisticsComboActionPerformed
        String[] statistics ={"Monthly Costs", "Fuel Price (in liters)", "Total Odemeter" , "Fill up Costs"};
      //  return statistics;
        /*
        Monthly Costs: x=Date, y = costs
        Fuel Price in liters: x = Date, y = Euro
        Total Odemeter: x = Date, y = KM
        Fill up Costs: x = Date, y = KM
        */
        
    }//GEN-LAST:event_chooseStatisticsComboActionPerformed

    
    private void selectCarInDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCarInDBActionPerformed
            //ToDO
    }//GEN-LAST:event_selectCarInDBActionPerformed

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed

        
           
        String query = "select id from CAR where CarName = ?;";
             Connection conn = new javaconnect().ConnecrDb();
           PreparedStatement pst=null;
           ResultSet rs = null;
        
           String value = selectCarInDB.getSelectedItem().toString();
            try { 
                pst = conn.prepareStatement(query);  
                pst.setString(1, value);
                rs = pst.executeQuery();
           
           String username = Login_JFrame.getUsername();
           
            int id = MainWindow.get_userID(username);
            
        

//Labels werden ausgefüllt
        searchMaxRange(id);
        calculateMaxCosts(id);
        calculateAvgLiters(id);
        calculateAvgPrice(id);
        calculateCarCosts(id);
        caluclateMaxRange(id);
        
            } catch (SQLException ex) {
                Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
    }//GEN-LAST:event_executeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
               //Graph wird erstellt
        String value = chooseStatisticsCombo.getSelectedItem().toString();
        
        if(value.equals("Last Entrys")){
                JFrame frame = new JFrame("Chart: Fill-Up-Costs");
                frame.setSize(600, 400);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setVisible(true);
                XYDataset ds = xycreateDataset();
                JFreeChart chart = ChartFactory.createXYLineChart("FILL-UP-Costs Chart",
                        "entrys", "costs", ds, PlotOrientation.VERTICAL, true, true,
                        false);

                ChartPanel cp = new ChartPanel(chart);
                frame.getContentPane().add(cp);
                
        }else if(value.equals("Fuel Price (in liters)")){
          JFrame frame = new JFrame("Chart: Fill-Up-Costs");
/*

                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);
*/


                CategoryDataset dataset = carsAtOneHundredKilometerCreateDataset();
                JFreeChart chart =  CarsAtOnHundredCreateChart(dataset);
                ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setFillZoomRectangle(true);
                chartPanel.setMouseWheelEnabled(true);
                chartPanel.setPreferredSize(new Dimension(500, 270));
                frame.setContentPane(chartPanel);frame.setSize(600, 400);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setVisible(true);
            
            
            
        }else if(value.equals("Total Odemeter")){
            
              JFrame frame = new JFrame("Chart: Fill-Up-Costs");
/*

                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);
              
            
*/


                CategoryDataset dataset = createDataset();
                JFreeChart chart =  createChart(dataset);
                ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setFillZoomRectangle(true);
                chartPanel.setMouseWheelEnabled(true);
                chartPanel.setPreferredSize(new Dimension(500, 270));
                frame.setContentPane(chartPanel);frame.setSize(600, 400);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setVisible(true);
                
        }else if(value.equals("Liters for 100 KM")){
            JFrame frame = new JFrame("Chart: Fuel Price per liter");
/*
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);            
*/
                CategoryDataset dataset = fuelPricecreateDataset();
                JFreeChart chart =  FuelLiterCreateChart(dataset);
                ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setFillZoomRectangle(true);
                chartPanel.setMouseWheelEnabled(true);
                chartPanel.setPreferredSize(new Dimension(500, 270));
                frame.setContentPane(chartPanel);frame.setSize(600, 400);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setVisible(true);
            
        
        }
  
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Statistics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> chooseStatisticsCombo;
    private javax.swing.JButton closingStatistics;
    private javax.swing.JButton execute;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel printAvgLiters;
    private javax.swing.JLabel printAvgPrice;
    private javax.swing.JLabel printCostsForCar;
    private javax.swing.JLabel printMaxRange;
    private javax.swing.JComboBox<String> selectCarInDB;
    private javax.swing.JLabel totalCosts;
    private javax.swing.JLabel totalRange;
    // End of variables declaration//GEN-END:variables

    private void searchMaxRange(int id) {
        
        String query = "select c.kmstatus ,max(f.kmstatus) from fuelentry f, car c\n" +
        "where f.carID = c.id and c.userID = ? and CarName = ?;";
        Connection conn = new javaconnect().ConnecrDb();
           PreparedStatement pst=null;
           ResultSet rs = null;
        
        try {
            pst = conn.prepareStatement(query);
            pst.setInt(1, MainWindow.get_userID(Login_JFrame.getUsername()));
            pst.setString(2, selectCarInDB.getSelectedItem().toString());
            rs = pst.executeQuery();
            
            int kmstatusCar=0;
            int kmstatusFuel=0;
            
            while(rs.next()){
                kmstatusCar = Integer.parseInt(rs.getString(1));
                kmstatusFuel = rs.getInt(2);
            }
            kmstatusFuel-=kmstatusCar;
            
            printMaxRange.setText(kmstatusFuel+" KM");
            
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        
        
        
    }

    
    private void calculateCarCosts(int id){
        Connection conn = new javaconnect().ConnecrDb();
        PreparedStatement pst = null;
        ResultSet rs = null;
        
        
       String query = "select id from car where carname = ?";
        try {
            
            pst = conn.prepareStatement(query);
            pst.setString(1, selectCarInDB.getSelectedItem().toString());
            rs = pst.executeQuery();
            int carid=0; 
            
            while(rs.next()){
                carid = rs.getInt(1);
            }

            query = "select endcost from fuelentry WHERE  userid = ? and carID = ?;";
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            pst.setInt(2, carid);
            rs = pst.executeQuery();
            
            double erg= 0;
            double value = 0;
            
            while(rs.next()){
                value = rs.getDouble(1);
                erg +=value;
            }
            
            erg*=100;
            erg = Math.round(erg);
            erg /= 100;
            
            printCostsForCar.setText(Double.toString(erg)+" EUR");
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    
    private void caluclateMaxRange(int id){
         Connection conn = new javaconnect().ConnecrDb();
           PreparedStatement pst=null;
           ResultSet rs = null;
          
         try {
       
            String query = "select c.kmstatus, c.CarName, max(f.kmstatus) , f.daytime from fuelentry f, car c\n" +
                    "where f.carID = c.id and c.userID = ?\n" +
                    "GROUP BY c.CarName;";
           
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();
            
            int value = 0;
            while(rs.next()){
                int kmFirst = rs.getInt(1);
                int kmstatus = rs.getInt(3);
                String carName = rs.getString(2);
                kmstatus -= kmFirst;
                value +=kmstatus;
            }
            String text = Integer.toString(value);
            totalRange.setText(text+" KM");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        
    }
    
    
    
    private void calculateMaxCosts(int id) {
         Connection conn = new javaconnect().ConnecrDb();
           PreparedStatement pst=null;
           ResultSet rs = null;
          String query = "select endcost from fuelentry where fuelID = ?;";
         try {
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();
            
            double value = 0;
            double erg=0;
            while(rs.next()){
                value = rs.getInt(1);
                erg += value;
            }
            
            query = Double.toString(erg);
            totalCosts.setText(query +" €");
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        
    }

    private void calculateAvgPrice(int id) {
            String query = "select ppLiter from FuelEntry where fuelID = ?";
            
            Connection conn = new javaconnect().ConnecrDb();
           PreparedStatement pst=null;
           ResultSet rs = null;
            
            try {
                pst = conn.prepareStatement(query);
                pst.setInt(1, id);
                rs = pst.executeQuery();
                
                double value=0;
                double valueCost=0;
                
                while(rs.next()){
                    value = rs.getInt(1);
                    valueCost += value;
                }
                System.out.println("PPLiter: "+valueCost);
                
                query = "select count(*) from FuelEntry";
                pst = conn.prepareStatement(query);
                rs = pst.executeQuery();
                while(rs.next()){
                     int anzahl = rs.getInt(1); 
                     valueCost /= anzahl;
                }
            
               valueCost*=100;
               valueCost = Math.round(valueCost);
               valueCost /=100;
                
               
                printAvgPrice.setText(Double.toString(valueCost)+" Euro");
                
                
                
        } catch (SQLException ex) {
            ex.printStackTrace();
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
    }

    private void calculateAvgLiters(int id) {
       //(Number of litres X 100) / (km at the end – km at the beginning)
       
       //liters
            Connection conn = new javaconnect().ConnecrDb();
            pst=null;
           rs = null;
       String query = "select id from car where carname = ?";
        try {
            
            pst = conn.prepareStatement(query);
            pst.setString(1, selectCarInDB.getSelectedItem().toString());
            rs = pst.executeQuery();
            int carid=0; 
            
            while(rs.next()){
                carid = rs.getInt(1);
            }

            
            query = "select literamount, carID from FuelEntry f, fuel g where f.fuelID=g.id and userid = ? and carID = ?;";
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            pst.setInt(2, carid);
            rs = pst.executeQuery();
            
            double value = 0;
            double erg = 0;
            
            while(rs.next()){
                value = rs.getDouble(1);
                erg += value;
            }
       
            
            query = "select max(f.kmstatus), c.kmstatus from fuelentry f, car c where f.userid = ? and f.carID = ? and f.carID = c.id;";
           pst = conn.prepareStatement(query);
           pst.setInt(1, id);
           pst.setInt(2, carid);
           rs = pst.executeQuery();
           
           int maxKM =0;
           int kmMin=0;
           while(rs.next()){
               maxKM = rs.getInt(1);
               kmMin = Integer.parseInt(rs.getString(2));
           }
           int km = maxKM-kmMin;
           
           double ergebnis = erg * 100 / km;
            
           ergebnis *= 1000;
           ergebnis = Math.round(ergebnis);
           ergebnis/=1000;
          
           printAvgLiters.setText(Double.toString(ergebnis)+" l"); 
            
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
      
    }
    
    
    
    
    
    
      private static XYDataset xycreateDataset() {
        /*
            fill up costs :x-date, y-km
        */

        DefaultXYDataset ds = new DefaultXYDataset();

        Connection conn =  new javaconnect().ConnecrDb();

        //getUsername
       
        String username = Login_JFrame.getUsername();
        //getid
        int id = MainWindow.get_userID(username);
        
               String query = "SELECT Count(*) from fuelentry where userid = ?";
        try {
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
             rs = pst.executeQuery();
             int count=0;
             while(rs.next()){
                 count = rs.getInt(1);
             }

            System.out.println(count);

            //search in db every entry fuelentry with the id
            query = "select endcost from fuelentry where userid = ? ORDER  by id DESC ";

            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs  = pst.executeQuery();



            int counter=0;
            double i=1.0;
            double[] entrys = new double[count];
            double[] costs = new double[count];

            while(rs.next() && counter < 30){
                costs[counter] = rs.getDouble(1);
                entrys[counter] = i;
                i++;
                counter++;

            }

            double[][] data = { entrys, costs };

            ds.addSeries("Fill-Up-Costs", data);

            return ds;

        } catch (SQLException e) {
            e.printStackTrace();
        } finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        return ds = null;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private static JFreeChart createChart(CategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart("Total Odemeter", "Cars" ,"Kilometer" , dataset);

               CategoryPlot plot = (CategoryPlot) chart.getPlot();

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
               rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
                BarRenderer renderer = (BarRenderer) plot.getRenderer();
                renderer.setDrawBarOutline(false);
                chart.getLegend().setFrame(BlockBorder.NONE);
                return chart;
    }

    static ResultSet rs = null;
    static PreparedStatement pst = null;
    
    private static CategoryDataset createDataset() {
           Connection conn = new javaconnect().ConnecrDb();
        
           
           DefaultCategoryDataset dataset = new DefaultCategoryDataset();

  
        try {

            
            String username = Login_JFrame.get_username();
           
            int id = MainWindow.get_userID(username);
            
        

            String query = "select c.kmstatus, c.CarName, max(f.kmstatus) , f.daytime from fuelentry f, car c\n" +
                    "where f.carID = c.id and c.userID = ?\n" +
                    "GROUP BY c.CarName;";
           
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();
            
            while(rs.next()){
                int kmFirst = rs.getInt(1);
                int kmstatus = rs.getInt(3);
                String carName = rs.getString(2);
                kmstatus -= kmFirst;
                dataset.addValue(kmstatus, carName, carName);
            }
           
            return  dataset;
        } catch (SQLException e) {
            e.printStackTrace();
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        return  null;


    }

    
    
    
    
    
    
    /*
    Liters price Fuel
    */
    private static JFreeChart FuelLiterCreateChart(CategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart("Fuel-Cost-Chart", "Fuel" ,"Price" , dataset);

               CategoryPlot plot = (CategoryPlot) chart.getPlot();

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
               rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
                BarRenderer renderer = (BarRenderer) plot.getRenderer();
                renderer.setDrawBarOutline(false);
                chart.getLegend().setFrame(BlockBorder.NONE);
                return chart;
    }
    private CategoryDataset fuelPricecreateDataset() {
     
         DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            Connection conn = new javaconnect().ConnecrDb();

        try {

            //getUsername
            String username = Login_JFrame.getUsername();
            //getid
            int id = MainWindow.get_userID(username);
            

            String query = "select avg(ppLiter), fuelName from fuelentry f, fuel s where s.id=f.fuelID GROUP BY fuelID;";
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();

            while(rs.next()){
                double avg = rs.getDouble(1);
                String fuelName = rs.getString(2);
                dataset.addValue(avg, fuelName, fuelName);
            }

            return  dataset;
        } catch (SQLException e) {
            e.printStackTrace();
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
       
        
            }   
        return  null;


    }

    private CategoryDataset carsAtOneHundredKilometerCreateDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        Connection conn = new javaconnect().ConnecrDb();
        
        String username = Login_JFrame.getUsername();
        int id = MainWindow.get_userID(username);
          
        String query = "select count(*) from car where userid = ?";
                
        try {
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();
            int count=0;
                   while(rs.next()){ 
                    count = rs.getInt(1);
                   }
            System.out.println("zählung von autos: "+count);
            
            
            query = "select carname from car where userid = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();
            String[] carName = new String[count];
            int i=0;
            while(rs.next()){
                carName[i] = rs.getString(1);
                System.out.println(carName[i]);
                i++;
            }
            
            
            for(int j=0; j<count; j++){
                double value = calculateLitersPerOneHundredKM(carName[j], id);
                dataset.addValue(value, carName[j], carName[j]);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
        return dataset;

    }

    private double calculateLitersPerOneHundredKM(String car, int id){
       //liters
            Connection conn = new javaconnect().ConnecrDb();
            pst=null;
           rs = null;
       String query = "select id from car where carname = ?";
        try {
            
            pst = conn.prepareStatement(query);
            pst.setString(1, car);
            rs = pst.executeQuery();
            int carid=0; 
            
            while(rs.next()){
                carid = rs.getInt(1);
            }

            
            query = "select literamount, carID from FuelEntry f, fuel g where f.fuelID=g.id and userid = ? and carID = ?;";
            pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            pst.setInt(2, carid);
            rs = pst.executeQuery();
            
            double value = 0;
            double erg = 0;
            
            while(rs.next()){
                value = rs.getDouble(1);
                erg += value;
            }
       
            
            query = "select max(f.kmstatus), c.kmstatus from fuelentry f, car c where f.userid = ? and f.carID = ? and f.carID = c.id;";
           pst = conn.prepareStatement(query);
           pst.setInt(1, id);
           pst.setInt(2, carid);
           rs = pst.executeQuery();
           
           int maxKM =0;
           int kmMin=0;
           while(rs.next()){
               maxKM = rs.getInt(1);
               kmMin = Integer.parseInt(rs.getString(2));
           }
           int km = maxKM-kmMin;
           
           double ergebnis = erg * 100 / km;
            
           ergebnis *= 1000;
           ergebnis = Math.round(ergebnis);
           return ergebnis/=1000;
           
        } catch (SQLException ex) {
            ex.printStackTrace();
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }       
        }  
        return 0; 
}    

    private JFreeChart CarsAtOnHundredCreateChart(CategoryDataset dataset) {
         JFreeChart chart = ChartFactory.createBarChart("Price Per Onhundred Kilometer", "Cars" ,"Liters" , dataset);
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
               rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
                BarRenderer renderer = (BarRenderer) plot.getRenderer();
                renderer.setDrawBarOutline(false);
                chart.getLegend().setFrame(BlockBorder.NONE);
                return chart;
    }

    private String selectAllCars() {
     Connection conn = new javaconnect().ConnecrDb();
     
        String username=Login_JFrame.getUsername();
        try{
            String sql="SELECT x.CarName\n" +
            "from CAR x\n" +
            "JOIN UserData y\n" +
            "on x.userID=y.id\n" +
            "where username='"+username+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            while(rs.next()){
                String name= rs.getString("CarName");
                selectCarInDB.addItem(name);
            }
          
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
                try {
                    if(conn != null)conn.close();
                    if(rs != null)rs.close();
                    if(pst!= null)pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                }
            
        }
           return null; 
    }
}
